import requests
import json
from typing import List, Dict, Any, Optional
import time


class VulnerabilityChecker:
    def __init__(self):
        self.osv_api_url = "https://api.osv.dev/v1/query"
        self.cache = {}  # Simple in-memory cache

    def check_vulnerabilities(self, dependencies: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Check dependencies for vulnerabilities"""
        vulnerabilities = []

        for dep in dependencies:
            vuln = self._check_single_dependency(dep)
            if vuln:
                vulnerabilities.extend(vuln)

        return vulnerabilities

    def _check_single_dependency(self, dep: Dict[str, Any]) -> Optional[List[Dict[str, Any]]]:
        """Check a single dependency for vulnerabilities"""
        ecosystem = dep["ecosystem"]
        name = dep["dependency"]["name"]
        version = dep["dependency"]["version"]

        # Map ecosystem names to OSV format
        osv_ecosystem = self._map_ecosystem(ecosystem)
        if not osv_ecosystem:
            return None

        cache_key = f"{osv_ecosystem}/{name}/{version}"

        if cache_key in self.cache:
            return self.cache[cache_key]

        # Query OSV
        query = {
            "package": {
                "name": name,
                "ecosystem": osv_ecosystem
            },
            "version": version
        }

        try:
            response = requests.post(self.osv_api_url, json=query, timeout=10)
            response.raise_for_status()
            data = response.json()

            vulns = []
            if "vulns" in data:
                for vuln in data["vulns"]:
                    vuln_record = {
                        "dependency": dep,
                        "vulnerability": {
                            "id": vuln.get("id", ""),
                            "summary": vuln.get("summary", ""),
                            "details": vuln.get("details", ""),
                            "severity": self._get_severity(vuln),
                            "references": vuln.get("references", [])
                        }
                    }
                    vulns.append(vuln_record)

            self.cache[cache_key] = vulns if vulns else None
            return vulns

        except (requests.RequestException, json.JSONDecodeError) as e:
            print(f"Error checking vulnerabilities for {name}: {e}")
            self.cache[cache_key] = None
            return None

    def _map_ecosystem(self, ecosystem: str) -> Optional[str]:
        """Map internal ecosystem names to OSV ecosystem names"""
        mapping = {
            "npm": "npm",
            "pypi": "PyPI",
            "cargo": "crates.io",
            "maven": "Maven",
            "go": "Go",
            "swift": "SwiftURL",  # OSV might not support all
        }
        return mapping.get(ecosystem.lower())

    def _get_severity(self, vuln: Dict[str, Any]) -> str:
        """Extract severity from vulnerability data"""
        # OSV provides severity in database_specific field sometimes
        if "database_specific" in vuln and "severity" in vuln["database_specific"]:
            severity = vuln["database_specific"]["severity"]
            if isinstance(severity, list) and severity:
                return severity[0].get("rating", "UNKNOWN")
            elif isinstance(severity, str):
                return severity

        # Default to medium if not specified
        return "MEDIUM"
